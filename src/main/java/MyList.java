import java.util.Iterator;

/**
 * Список - упорядоченная коллекция.  Пользователь этого
 * интерфейса имеет точный контроль над тем, куда в списке вставляется каждый элемент.
 * Пользователь может получить доступ к элементам по их индексу (позиции в
 * списке).
 * <p>
 * Списки допускают дублирование элементов. Списки обычно допускают пары элементов {@code e1} и {@code e2}
 * такие, что {@code e1.equals(e2)}, и допускают нулевые элементы.
 * Есть возможность, реализовать список, запрещающий дублирование, путем
 * создания исключений во время выполнения, когда пользователь пытается их вставить.
 * <p>
 * Интерфейс {@code MyList} предоставляет один метод для позиционного (индексированного)
 * доступа к элементам списка. Эта операция может выполняться во времени, пропорциональном значению индекса (O(n)).
 * <p>
 * Интерфейс {@code MyList} предоставляет итератор {@code Iterator}, который позволяет перемещаться по списку.

 * <p>
 * Интерфейс {@code MyList} предоставляет один метод для поиска указанного объекта.
 * С точки зрения производительности этот метод следует использовать с осторожностью.
 * Во многих реализациях он будет выполнять с линейной сложностью O(n).
 * <p>
 * Интерфейс {@code MyList} предоставляет по одному методу для эффективной вставки и
 * удаления одного элемента (в зависимости от реализации).
 * <p>
 *
 * @param <E> тип элементов в этом списке
 */

public interface MyList<E> extends Iterable<E> {

    /**
     * @return Возвращает количеств элементов в списке.
     */
    int size();

    /**
     * Returns {@code true} если список не содержит элементы.
     */
    boolean isEmpty();

    /**
     * Returns {@code true} если список содержит передаваемы элемент.
     * Проверяет элементы по {@code Objects.equals(o, e)}.
     */
    boolean contains(E element);

    /**
     * @return возвращает итератор этого списка
     */
    Iterator<E> iterator();

    /**
     * Добавляет новый элемент в конце списка
     *
     * @param element элемент, который будет добавлен в список
     */
    void add(E element);

    /**
     * Удаляет первый совпадающий элемент. Совпадение проверяется с помощью метод equals.
     *
     * @param element элемент, который будет удалён, если найдётся
     */
    void remove(E element);


    /**
     * Удаляет элемент находящийся на позиции, равной передаваемому индексу
     *
     * @param index индекс элемента, который будет удалён
     */
    void remove(int index);

    /**
     * Удаляет все элементы из коллекции. После вызова список будет пуст
     */
    void clear();

    /**
     * Возвращает элемент, который находится на позиции, равной передаваемому индексу.
     *
     * @param index индекс возвращаемого элемента
     * @return элемент, находящийся в списке на позиции, равной индексу
     */
    E get(int index);

    /**
     * Заменяет элемент на позиции в списке, равной индексу
     *
     * @param index   индекс элемента, который будет заменён
     * @param element элемент, на который будет произведена замена
     */
    void set(E element, int index);

    /**
     * Вставляет элемент не определённую позицию в списке, равную индексу.
     * Все элементы после индекс сдвигаются вправо
     *
     * @param index   индекс, на который будет вставлен элемент
     * @param element элемент, который будет вставлен
     */
    void add(E element, int index);

}
